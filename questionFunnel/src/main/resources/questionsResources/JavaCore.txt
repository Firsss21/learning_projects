Чем различаются JRE, JVM и JDK? /
Какие существуют модификаторы доступа? /
О чем говорит ключевое слово final? /
Какими значениями инициализируются переменные по умолчанию? /
Что вы знаете о функции main()? /
Какие логические операции и операторы вы знаете? /
Что такое тернарный оператор выбора? /
Какие побитовые операции вы знаете? /
Где и для чего используется модификатор abstract? /
Дайте определение понятию «интерфейс». Какие модификаторы по умолчанию имеют поля и методы интерфейсов? /
Чем абстрактный класс отличается от интерфейса? В каких случаях следует использовать абстрактный класс, а в каких интерфейс? /
Почему в некоторых интерфейсах вообще не определяют методов? /
Почему нельзя объявить метод интерфейса с модификатором final? /
Что имеет более высокий уровень абстракции - класс, абстрактный класс или интерфейс? /
Может ли объект получить доступ к private-переменной класса? Если, да, то каким образом? /
Каков порядок вызова конструкторов и блоков инициализации с учётом иерархии классов? /
Зачем нужны и какие бывают блоки инициализации? /
К каким конструкциям Java применим модификатор static? /
Для чего в Java используются статические блоки инициализации? /
Что произойдёт, если в блоке инициализации возникнет исключительная ситуация? /
Какое исключение выбрасывается при возникновении ошибки в блоке инициализации класса? /
Может ли статический метод быть переопределён или перегружен? /
Могут ли нестатические методы перегрузить статические? /
Можно ли сузить уровень доступа/тип возвращаемого значения при переопределении метода? /
Возможно ли при переопределении метода изменить: модификатор доступа; возвращаемый тип; тип аргумента или их количество; имена аргументов или их порядок, убирать, добавлять, изменять порядок следования элементов секции throws? /
Как получить доступ к переопределенным методам родительского класса? /
Можно ли объявить метод абстрактным и статическим одновременно? /
В чем разница между членом экземпляра класса и статическим членом класса? /
Где разрешена инициализация статических/нестатических полей? /
Какие типы классов бывают в java? /
Расскажите про вложенные классы. В каких случаях они применяются? /
Что такое «статический класс»? /
Какие существуют особенности использования вложенных классов: статических и внутренних? В чем заключается разница между ними? /
Что такое «локальный класс»? Каковы его особенности? /
Что такое «анонимные классы»? Где они применяются? /
Каким образом из вложенного класса получить доступ к полю внешнего класса? /
Для чего используется оператор assert? /
Для чего нужен сборщик мусора? /
Как работает сборщик мусора? /
Какие разновидности сборщиков мусора реализованы в виртуальной машине HotSpot? /
Опишите алгоритм работы какого-нибудь сборщика мусора реализованного в виртуальной машине HotSpot. /
Что такое finalize()? Зачем он нужен? /
Что произойдет со сборщиком мусора, если выполнение метода finalize() требует ощутимо много времени, или в процессе выполнения будет выброшено исключение? /
Чем отличаются final, finally и finalize()? /
Что такое Heap и Stack память в Java? Какая разница между ними? /
Верно ли утверждение, что примитивные типы данных всегда хранятся в стеке, а экземпляры ссылочных типов данных в куче? /
Каким образом передаются переменные в методы, по значению или по ссылке? /
Расскажите про приведение типов. Что такое понижение и повышение типа? /
Когда в приложении может быть выброшено исключение ClassCastException? /
Что такое autoboxing («автоупаковка») в Java и каковы правила упаковки примитивных типов в классы-обертки? /
Какие есть особенности класса String? /
Что такое «пул строк»? /
Почему String неизменяемый и финализированный класс? /
Почему char[] предпочтительнее String для хранения пароля? /
Почему строка является популярным ключом в HashMap в Java? /
Что делает метод intern() в классе String?. /
Можно ли использовать строки в конструкции switch? /
Какая основная разница между String, StringBuffer, StringBuilder? /
Что такое класс Object? Какие в нем есть методы? /
Расскажите про клонирование объектов. /
В чем отличие между поверхностным и глубоким клонированием? /
Какой способ клонирования предпочтительней? /
Почему метод clone() объявлен в классе Object, а не в интерфейсе Cloneable? /
Дайте определение понятию «конструктор». /
Что такое «конструктор по умолчанию»? /
Чем отличаются конструкторы по-умолчанию, копирования и конструктор с параметрами? /
Где и как вы можете использовать закрытый конструктор? /
Расскажите про классы-загрузчики и про динамическую загрузку классов. /
Что такое Reflection? /
Зачем нужен equals(). Чем он отличается от операции ==? /
equals() порождает отношение эквивалентности. Какими свойствами обладает такое отношение? /
Если вы хотите переопределить equals(), какие условия должны удовлетворяться для переопределенного метода? /
Правила переопределения метода Object.equals(). /
Какая связь между hashCode() и equals()? /
Если equals() переопределен, есть ли какие-либо другие методы, которые следует переопределить? /
Что будет, если переопределить equals() не переопределяя hashCode()? Какие могут возникнуть проблемы? /
Каким образом реализованы методы hashCode() и equals() в классе Object? /
Для чего нужен метод hashCode()? /
Правила переопределения метода Object.hashCode(). /
Есть ли какие-либо рекомендации о том, какие поля следует использовать при подсчете hashCode()? /
Могут ли у разных объектов быть одинаковые hashCode()? /
Если у класса Point{int x, y;} реализовать метод equals(Object that) {(return this.x == that.x && this.y == that.y)}, но сделать хэш-код в виде int hashCode() {return x;}, то будут ли корректно такие точки помещаться и извлекаться из HashSet? /
Могут ли у разных объектов (ref0 != ref1) быть ref0.equals(ref1) == true? /
Могут ли у разных ссылок на один объект (ref0 == ref1) быть ref0.equals(ref1) == false? /
Можно ли так реализовать метод equals(Object that) {return this.hashCode() == that.hashCode()}? /
В equals() требуется проверять, что аргумент equals(Object that) такого же типа что и сам объект. В чем разница между this.getClass() == that.getClass() и that instanceof MyClass? /
Можно ли реализовать метод equals() класса MyClass вот так: class MyClass {public boolean equals(MyClass that) {return this == that;}}? /
Есть класс Point{int x, y;}. Почему хэш-код в виде 31 * x + y предпочтительнее чем x + y? /
Опишите иерархию исключений. /
Какие виды исключений в Java вы знаете, чем они отличаются? /
Что такое checked и unchecked exception? /
Какой оператор позволяет принудительно выбросить исключение? /
О чем говорит ключевое слово throws? /
Как написать собственное («пользовательское») исключение? /
Какие существуют unchecked exception? /
Что такое Error? /
Что вы знаете о OutOfMemoryError? /
Опишите работу блока try-catch-finally. /
Что такое механизм try-with-resources? /
Возможно ли использование блока try-finally (без catch)? /
Может ли один блок catch отлавливать сразу несколько исключений? /
Всегда ли исполняется блок finally? /
Существуют ли ситуации, когда блок finally не будет выполнен? /
Может ли метод main выбросить исключение во вне и если да, то где будет происходить обработка данного исключения? /
Предположим, есть метод, который может выбросить IOException и FileNotFoundException в какой последовательности должны идти блоки catch? Сколько блоков catch будет выполнено? /
Что такое generics? /
Что такое «интернационализация», «локализация»? /