Расскажите о модели памяти Java? /
Что такое «потокобезопасность»? /
В чём разница между «конкуренцией» и «параллелизмом»? /
Что такое «кооперативная многозадачность»? Какой тип многозадачности использует Java? Чем обусловлен этот выбор? /
Что такое ordering, as-if-serial semantics, sequential consistency, visibility, atomicity, happens-before, mutual exclusion, safe publication? /
Чем отличается процесс от потока? /
Что такое «зелёные потоки» и есть ли они в Java? /
Каким образом можно создать поток? /
Чем различаются Thread и Runnable? /
В чём заключается разница между методами start() и run()? /
Как принудительно запустить поток? /
Что такое «монитор» в Java? /
Дайте определение понятию «синхронизация». /
Какие существуют способы синхронизации в Java? /
В каких состояниях может находиться поток? /
Можно ли создавать новые экземпляры класса, пока выполняется static synchronized метод? /
Зачем может быть нужен private мьютекс? /
Как работают методы wait() и notify() notifyAll()? /
В чем разница между notify() и notifyAll()? /
Почему методы wait() и notify() вызываются только в синхронизированном блоке? /
Чем отличается работа метода wait() с параметром и без параметра? /
Чем отличаются методы Thread.sleep() и Thread.yield()? /
Как работает метод Thread.join()? /
Что такое deadlock? /
Что такое livelock? /
Как проверить, удерживает ли поток монитор определённого ресурса? /
На каком объекте происходит синхронизация при вызове static synchronized метода? /
Для чего используется ключевое слово volatile, synchronized, transient, native? /
В чём различия между volatile и Atomic переменными? /
В чём заключаются различия между java.util.concurrent.Atomic*.compareAndSwap() и java.util.concurrent.Atomic*.weakCompareAndSwap(). /
Что значит «приоритет потока»? /
Что такое «потоки-демоны»? /
Можно ли сделать основной поток программы демоном? /
Что значит «усыпить» поток? /
Чем отличаются два интерфейса Runnable и Callable? /
Что такое FutureTask? /
В чем заключаются различия между CyclicBarrier и CountDownLatch? /
Что такое race condition? /
Существует ли способ решения проблемы race condition? /
Как остановить поток? /
Почему не рекомендуется использовать метод Thread.stop()? /
Что происходит, когда в потоке выбрасывается исключение? /
В чем разница между interrupted() и isInterrupted()? /
Что такое «пул потоков»? /
Какого размера должен быть пул потоков? /
Что будет, если очередь пула потоков уже заполнена, но подаётся новая задача? /
В чём заключается различие между методами submit() и execute() у пула потоков? /
В чем заключаются различия между cтеком (stack) и кучей (heap) с точки зрения многопоточности? /
Как поделиться данными между двумя потоками? /
Какой параметр запуска JVM используется для контроля размера стека потока? /
Как получить дамп потока? /
Что такое ThreadLocal-переменная? /
Назовите различия между synchronized и ReentrantLock? /
Что такое ReadWriteLock? /
Что такое «блокирующий метод»? /
Что такое «фреймворк Fork Join»? /
Что такое Semaphore? /
Что такое double checked locking Singleton? /
Как создать потокобезопасный Singleton? /
Чем полезны неизменяемые объекты? /
Что такое busy spin? /
Перечислите принципы, которым вы следуете в многопоточном программировании? /
Какое из следующих утверждений о потоках неверно? /
Даны 3 потока Т1, Т2 и Т3? Как реализовать выполнение в последовательности Т1, Т2, Т3? /
Напишите минимальный неблокирующий стек (всего два метода — push() и pop()). /
Напишите минимальный неблокирующий стек (всего два метода — push() и pop()) с использованием Semaphore. /
Напишите минимальный неблокирующий ArrayList (всего четыре метода — add(), get(), remove(), size()). /
Напишите потокобезопасную реализацию класса с неблокирующим методом BigInteger next(), который возвращает элементы последовательности: [1, 2, 4, 8, 16, ...]. /
Напишите простейший многопоточный ограниченный буфер с использованием synchronized. /
Напишите простейший многопоточный ограниченный буфер с использованием ReentrantLock. /